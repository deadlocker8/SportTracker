<!DOCTYPE html>

<html>
    <head>
        <meta charset="UTF-8">
        <title>SportTracker - {{ gettext('Tile Hunting') }}</title>
        {% import 'macros.jinja2' as macros with context %}
        {{ macros.header() }}
        <link type="text/css" rel="stylesheet" href="{{ url_for('static', filename="css/leaflet-theme.css") }}"/>
        <style>
            .leaflet-layer:first-child {
                -webkit-filter: grayscale(100%);
                filter: grayscale(100%);
            }
        </style>
    </head>
    <body class="bg-dark text-light">
        {{ macros.navbar('tileHunting') }}

        <div class="row my-3 g-0">
            <div class="col col-12 mx-auto d-flex flex-row align-items-center justify-content-center">
                <div class="d-none d-lg-block">
                    {{ macros.workout_type_quick_filter(url_for(redirectUrl), true) }}
                </div>
                <div class="d-lg-none">
                    <div class="d-flex flex-column align-items-center justify-content-center ms-3">
                        {{ macros.workout_type_quick_filter(url_for(redirectUrl), true) }}
                    </div>
                </div>

                <div class="ms-5">
                    <form role="form" action="{{ url_for('maps.toggleYears') }}" method="post" class="d-flex flex-row align-items-center justify-content-center">
                        <div class="row row-cols-auto">
                            <input type="hidden" name="redirectUrl" value="{{ url_for(redirectUrl) }}"/>
                            {% for availableYear in availableYears %}
                                <div class="col my-1">
                                    <input class="btn-check" type="checkbox" role="switch"
                                           {% if availableYear in yearFilterState %}checked{% endif %}
                                           id="availableYear-{{ loop.index }}"
                                           name="activeYears"
                                           value="{{ availableYear }}">
                                    <label class="btn btn-sm btn-available-year" for="availableYear-{{ loop.index }}">
                                        {{ availableYear }}
                                    </label>
                                </div>
                            {% endfor %}
                            {% if availableYears | length != 0 %}
                                <div class="col my-1">
                                    <button type="submit" class="btn btn-sm btn-success">{{ gettext('Apply') }}</button>
                                </div>
                            {% endif %}
                        </div>
                    </form>
                </div>
            </div>
        </div>

        <div class="row g-0">
            <div class="col mb-3 d-flex flex-column flex-lg-row align-items-center justify-content-center">
                <div class="d-flex align-items-center justify-content-center">
                    <h3 class="text-center mb-2 mb-lg-0">{{ totalNumberOfTiles }} {{ gettext('Tiles visited') }}</h3>
                    <div id="button-help" class="link-light text-decoration-none d-inline-flex align-items-center ms-3 mb-2 mb-lg-0"
                         data-bs-toggle="tooltip"
                         data-bs-placement="right"
                         data-bs-html="true"
                         data-bs-title="{{ gettext('Tiles are shown in their corresponding workout type color. If different workout types had visited a tile, it will be shown in <span class=&quot;text-danger fw-bold&quot;>red</span>.') }}">
                        <span class="rounded-circle bg-primary p-1 fs-5 material-symbols-outlined">question_mark</span>
                    </div>
                </div>

                <div class="d-flex align-items-center justify-content-center ms-0 ms-lg-5">
                    <h3 class="text-center mb-2 mb-lg-0">{{ gettext('Max square:') }} {{ maxSquareSize }}x{{ maxSquareSize }}</h3>
                    <div id="button-help-max-square" class="link-light text-decoration-none d-inline-flex align-items-center ms-3 mb-2 mb-lg-0"
                         data-bs-toggle="tooltip"
                         data-bs-placement="right"
                         data-bs-html="true"
                         data-bs-title="{{ gettext('The size of the maximum square area that is completely covered by your visited tiles. If the checkbox &quot;Show max square&quot; is selected all tiles inside your max square will use this color: <span class=&quot;d-inline-block&quot; style=&quot;width: 10px; height: 10px; background-color: {maxSquareColor};&quot;></span>').format(maxSquareColor=maxSquareColor) }}">
                        <span class="rounded-circle bg-primary p-1 fs-5 material-symbols-outlined">question_mark</span>
                    </div>
                </div>

                <div class="d-flex flex-column  justify-content-center ms-0 ms-lg-5">
                    <div class="form-check text-nowrap mb-0">
                        <input class="form-check-input" type="checkbox"
                               id="tileHuntingEnableGrid"
                               {% if tileHuntingIsGridActive %}checked{% endif %}
                               data-url="{{ url_for('maps.toggleTileHuntingViewGrid', redirectUrl=url_for('maps.showTileHuntingMap')) }}">
                        <label class="form-check-label" for="tileHuntingEnableGrid">{{ gettext('Show grid') }}</label>
                    </div>

                    <div class="form-check text-nowrap mb-0">
                        <input class="form-check-input" type="checkbox"
                               id="tileHuntingEnableMaxSquare"
                               {% if tileHuntingIsMaxSquareActive %}checked{% endif %}
                               data-url="{{ url_for('maps.toggleTileHuntingMaxSquare', redirectUrl=url_for('maps.showTileHuntingMap')) }}">
                        <label class="form-check-label" for="tileHuntingEnableMaxSquare">{{ gettext('Show max square') }}</label>
                    </div>
                </div>

                <h5 class="mt-3 mt-lg-0 ms-0 ms-lg-5 mb-0" id="warning-zoom">
                    <span class="badge text-bg-warning text-wrap">{{ gettext('Zoom in to view visited tiles.') }}</span>
                </h5>
            </div>
        </div>

        <div class="row gx-0 gy-0">
            <div class="col col-12">
                <div id="map" class="leaflet-map text-dark"></div>
            </div>
        </div>

        <div class="row gx-0 gy-0">
            <div class="col col-12">
                <div id="chartContainer" style="max-height: 22vh;"></div>
            </div>
        </div>


        <script>
            tileRenderUrl = '{{ tileRenderUrl }}';
        </script>

        {% import 'maps/mapMacros.jinja2' as mapMacros with context %}
        {{ mapMacros.mapLocale() }}

        {{ macros.scripts() }}
        <script defer src="{{ url_for('static', filename='js/mapCommon.js') }}" type="text/javascript"></script>
        <script defer src="{{ url_for('static', filename='js/mapTileHunting.js') }}" type="text/javascript"></script>
        <script>
            const data = [
                {
                    x: {{ chartDataNewTilesPerWorkout['dates'] }},
                    y: {{ chartDataNewTilesPerWorkout['values'] }},
                    type: 'bar',
                    marker: {
                        color: {{ chartDataNewTilesPerWorkout['colors'] }}
                    },
                    customdata: {{ chartDataNewTilesPerWorkout['names'] }},
                    hovertemplate: '+%{y} "%{customdata.name}"<br>({{ gettext("Click bar to open in new tab") }})<extra></extra>'
                },
            ];

            const plotlyLayout = {
                paper_bgcolor: 'rgba(0,0,0,0)',
                plot_bgcolor: 'rgba(0,0,0,0)',
                xaxis: {
                    type: 'category',
                    color: '#FFFFFF',
                    automargin: true,
                },
                yaxis: {
                    title: '{{ gettext('Number of new tiles') }}',
                    rangemode: 'tozero',
                    showline: true,
                    color: '#FFFFFF'
                },
                legend: {
                    font: {
                        color: '#FFFFFF'
                    }
                },
                margin: {
                    t: 30,
                }
            }

            const plotlyConfig = {
                responsive: true,
                displayModeBar: false
            };

            Plotly.newPlot('chartContainer', data, plotlyLayout, plotlyConfig);

            document.getElementById('chartContainer').on('plotly_click', function(data)
            {
                for(let i = 0; i < data.points.length; i++)
                {
                    window.open(data.points[i].customdata.url, '_blank');
                }
            });
        </script>
    </body>
</html>

