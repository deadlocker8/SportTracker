{% macro mapLocale() -%}
    <script>
        map_locale = {
            'Acceleration': '{{ gettext('Acceleration') }}',
            'Altitude': '{{ gettext('Altitude') }}',
            'Slope': '{{ gettext('Slope') }}',
            'Speed': '{{ gettext('Speed') }}',
            'Total Length: ': '{{ gettext('Total Length: ') }}',
            'Max Elevation: ': '{{ gettext('Max Elevation: ') }}',
            'Min Elevation: ': '{{ gettext('Min Elevation: ') }}',
            'Avg Elevation: ': '{{ gettext('Avg Elevation: ') }}',
            'Total Time: ': '{{ gettext('Total Time: ') }}',
            'Total Ascent: ': '{{ gettext('Total Ascent: ') }}',
            'Total Descent: ': '{{ gettext('Total Descent: ') }}',
            'Min Slope: ': '{{ gettext('Min Slope: ') }}',
            'Max Slope: ': '{{ gettext('Max Slope: ') }}',
            'Avg Slope: ': '{{ gettext('Avg Slope: ') }}',
            'Min Speed: ': '{{ gettext('Min Speed: ') }}',
            'Max Speed: ': '{{ gettext('Max Speed: ') }}',
            'Avg Speed: ': '{{ gettext('Avg Speed: ') }}',
            'Min Acceleration: ': '{{ gettext('Min Acceleration: ') }}',
            'Max Acceleration: ': '{{ gettext('Max Acceleration: ') }}',
            'Avg Acceleration: ': '{{ gettext('Avg Acceleration: ') }}',
            'y: ': '{{ gettext('y: ') }}',
            'x: ': '{{ gettext('x: ') }}',
            't: ': '{{ gettext('t: ') }}',
            'T: ': '{{ gettext('T: ') }}',
            'm: ': '{{ gettext('m: ') }}',
            'v: ': '{{ gettext('v: ') }}',
            'a: ': '{{ gettext('a: ') }}',
            'button_expand_layers': '{{ gettext('Expand Legend') }}',
            'button_collapse_layers': '{{ gettext('Collapse Legend') }}',
            'button_reset': '{{ gettext('Reset zoom') }}',
        };
    </script>
{%- endmacro %}

{% macro meta_info_item(icon, iconColor, title, iconClass='material-symbols-outlined filled') -%}
    <div class="d-flex flex-column align-items-start mb-4">
        <div class="d-flex align-items-start">
            <div class="{{ iconClass }} {{ iconColor }} fs-3 me-2">{{ icon }}</div>
            <div>
                <div class="fs-5 text-body-secondary">{{ title }}</div>
                <div class="fs-4 text-body-emphasis">
                    {{ caller() }}
                </div>
            </div>
        </div>
    </div>
{%- endmacro %}

{% macro meta_info_item_small(icon, iconColor, subText, iconClass='material-symbols-outlined filled') -%}
    <div class="col d-flex flex-column align-items-center justify-content-between">
        <div class="{{ iconClass }} {{ iconColor }} fs-3 mb-2">{{ icon }}</div>
        <div class="fs-5 text-center text-body-emphasis">
            {{ caller() }}
        </div>
        <div class="fs-6 text-body-secondary text-center text-truncate">{{ gettext(subText) }}</div>
    </div>
{%- endmacro %}

{% macro stage_info_item(icon, iconColor, title, iconClass='material-symbols-outlined filled', alignment='align-items-center') -%}
    <div class="d-flex flex-column {{ alignment }}">
        <div class="d-flex align-items-center">
            <div class="{{ iconClass }} {{ iconColor }} fs-3 me-2">{{ icon }}</div>
            <div>
                <div class="fs-6 text-body-secondary">{{ title }}</div>
                <div class="fs-5 text-body-emphasis">
                    {{ caller() }}
                </div>
            </div>
        </div>
    </div>
{%- endmacro %}

{% macro gpxDownloadButton(title, gpxUrl, icon, isSvgIcon=false, classes='', editUrl='', externalEditorUrl='', classesButtons='') -%}
    <div class="card-header d-flex align-items-center {{ classes }} justify-content-between">
        <div class="d-flex align-items-center">
            {% if isSvgIcon %}
                <img class="icon-svg-small" src="{{ url_for('static', filename="images/icon_workouts.svg") }}" />
            {% else %}
                <i class="fa-solid {{ icon }} fa-fw fs-5 me-2"></i>
            {% endif %}
            <div class="fs-5 text-truncate">
                {{ title }}
            </div>
        </div>
        <div class="d-flex align-items-center {{ classesButtons }}">
            {% if editUrl %}
                <a href="{{ editUrl }}" class="btn btn-primary btn-sm ms-3 d-flex align-items-center">
                    <span class="material-symbols-outlined filled fs-4">edit</span>
                </a>
            {% endif %}
            <a href="{{ gpxUrl }}" class="btn btn-primary btn-sm ms-3 d-flex align-items-center" target="_blank">
                <span class="material-symbols-outlined filled fs-4">download</span><span>GPX</span>
            </a>
            {% if externalEditorUrl %}
                <a href="{{ externalEditorUrl }}" class="btn btn-primary btn-sm ms-3 d-flex align-items-center" target="_blank">
                    <span class="material-symbols-outlined filled fs-4">open_in_new</span>&nbsp;<span>Editor</span>
                </a>
            {% endif %}
        </div>
    </div>
{%- endmacro %}


{% macro showLinkedWorkoutsButton(linkedWorkouts, collapsibleId, classes) -%}
    <div class="d-flex flex-column align-items-center">
        <button class="btn btn-orange mb-3" type="button" data-bs-toggle="collapse" data-bs-target="#{{ collapsibleId }}">
            {% trans length=linkedWorkouts|length %}Show {{ length }} linked Workouts{% endtrans %}
        </button>
        <div class="collapse {{ classes }}" id="{{ collapsibleId }}">
            <div class="list-group text-start">
                {% for linkedWorkout in linkedWorkouts %}
                    <a href="{{ url_for('maps.showSingleWorkout', workout_id=linkedWorkout.id) }}"
                       class="list-group-item list-group-item-action d-flex justify-content-between fw-bold">
                        {{ linkedWorkout.startTime | format_date() }}
                        <span class="material-symbols-outlined filled text-primary">send</span>
                    </a>
                {% endfor %}
            </div>
        </div>
    </div>
{%- endmacro %}

{% macro tile_hunting_legend_item(color) %}
    <span class="d-inline-block ms-2 border border-1 border-white " style="width: 20px; height: 20px; background-color: {{ color }}"></span>
{%- endmacro %}

{% macro tileHuntingMapSettings(tileHuntingFilterState, redirectUrl, enableTilesOption=true, enableGridOption=true, enableNewTilesOption=true, enableMaxSquareOption=false, enablePlannedTileOption=false, forceButtonText=false, classes="ms-3") -%}
    <div class="dropdown {{ classes }}">
        <button class="btn btn-sm btn-primary dropdown-toggle d-inline-flex align-items-center" type="button" data-bs-toggle="dropdown" aria-expanded="false">
            <span class="material-symbols-outlined fs-5">explore</span>
            <span class="ms-2 {% if not forceButtonText %}d-none d-lg-block{% endif %}">{{ gettext('Tile Hunting') }}</span>
        </button>
        <div class="dropdown-menu px-3 py-2" data-bs-theme="dark">
            {% if enableTilesOption %}
                <div class="form-check text-nowrap mb-2">
                    <input class="form-check-input tileHuntingCheckbox" type="checkbox"
                           id="tileHuntingEnableTiles"
                           {% if tileHuntingFilterState.is_show_tiles_active %}checked{% endif %}
                           data-url="{{ url_for('maps.toggleTileHuntingViewTiles', redirectUrl=redirectUrl) }}">
                    <label class="form-check-label d-flex align-items-center justify-content-center" for="tileHuntingEnableTiles">
                        <span class="material-symbols-outlined fs-5">explore</span>&nbsp;
                        <span class="d-flex justify-content-between w-100">
                            <span>{{ gettext('Show visited tiles') }}</span>
                            {% for workoutType in distanceWorkoutTypes %}
                                {{ tile_hunting_legend_item(workoutType.tile_color) }}
                            {% endfor %}
                        </span>
                    </label>
                </div>
            {% endif %}

            {% if enableGridOption %}
                <div class="form-check text-nowrap">
                    <input class="form-check-input tileHuntingCheckbox" type="checkbox"
                           id="tileHuntingEnableGrid"
                           {% if tileHuntingFilterState.is_show_grid_active %}checked{% endif %}
                           {% if enableTilesOption and not tileHuntingFilterState.is_show_tiles_active %}disabled{% endif %}
                           data-url="{{ url_for('maps.toggleTileHuntingViewGrid', redirectUrl=redirectUrl) }}">
                    <label class="form-check-label d-flex align-items-center" for="tileHuntingEnableGrid">
                        <span class="material-symbols-outlined fs-5">window</span>&nbsp;{{ gettext('Show grid') }}
                    </label>
                </div>
            {% endif %}

            {% if enableNewTilesOption %}
                <div class="form-check text-nowrap mt-2">
                    <input class="form-check-input tileHuntingCheckbox" type="checkbox"
                           id="tileHuntingEnableOnlyHighlightNewTiles"
                           {% if tileHuntingFilterState.is_only_highlight_new_tiles_active %}checked{% endif %}
                           {% if enableTilesOption and not tileHuntingFilterState.is_show_tiles_active %}disabled{% endif %}
                           data-url="{{ url_for('maps.toggleTileHuntingOnlyHighlightNewTiles', redirectUrl=redirectUrl) }}">
                    <label class="form-check-label d-flex align-items-center" for="tileHuntingEnableOnlyHighlightNewTiles">
                        <span class="material-symbols-outlined fs-5">more_time</span>&nbsp;{{ gettext('Only highlight new tiles') }}
                    </label>
                </div>
            {% endif %}

            {% if enableMaxSquareOption %}
                <div class="form-check text-nowrap mt-2">
                    <input class="form-check-input tileHuntingCheckbox" type="checkbox"
                           id="tileHuntingEnableMaxSquare"
                           {% if tileHuntingFilterState.is_show_max_square_active %}checked{% endif %}
                           {% if enableTilesOption and not tileHuntingFilterState.is_show_tiles_active %}disabled{% endif %}
                           data-url="{{ url_for('maps.toggleTileHuntingMaxSquare', redirectUrl=redirectUrl) }}">
                    <label class="form-check-label d-flex align-items-center justify-content-center" for="tileHuntingEnableMaxSquare">
                        <span class="material-symbols-outlined fs-5">arrows_output</span>&nbsp;
                        <span class="d-flex justify-content-between w-100">
                            <span>{{ gettext('Show max square') }}</span>
                            {{ tile_hunting_legend_item(maxSquareColor) }}
                        </span>
                    </label>
                </div>
            {% endif %}

            {% if enablePlannedTileOption %}
                <div class="form-check text-nowrap mt-2">
                    <input class="form-check-input tileHuntingCheckbox" type="checkbox"
                           id="tileHuntingEnableShowPlannedTiles"
                           {% if tileHuntingFilterState.is_show_planned_tiles_active %}checked{% endif %}
                           {% if  enableTilesOption and not tileHuntingFilterState.is_show_tiles_active %}disabled{% endif %}
                           data-url="{{ url_for('maps.toggleTileHuntingShowPlannedTiles', redirectUrl=redirectUrl) }}">
                    <label class="form-check-label d-flex align-items-center justify-content-center" for="tileHuntingEnableShowPlannedTiles">
                        <i class="fa-solid fa-lightbulb fa-fw fs-5"></i>&nbsp;
                        <span class="d-flex justify-content-between w-100">
                            <span>{{ gettext('Show planned tiles') }}</span>
                            {{ tile_hunting_legend_item('rgba' +  plannedTileColor|string) }}
                        </span>
                    </label>
                </div>
            {% endif %}
        </div>
    </div>
{%- endmacro %}

{% macro mapYearFilter(availableYears, quickFilterState, redirectUrl) -%}
    {% set allSelected = availableYears|check_all_items_included(quickFilterState.years) %}

    <div class="dropdown position-static">
        <button class="btn btn-sm {% if allSelected %}btn-outline-light{% else %}btn-light{% endif %} dropdown-toggle d-inline-flex align-items-center" type="button" data-bs-toggle="dropdown" data-bs-auto-close="outside" aria-expanded="false">
            <span class="material-symbols-outlined fs-5">filter_alt</span>
            <span class="ms-2">{{ gettext('Years') }}</span>
        </button>
        <div class="dropdown-menu px-3 py-2" data-bs-theme="dark">
            <form role="form" action="{{ url_for('quickFilter.toggleYears') }}" method="post">
                <input type="hidden" name="redirectUrl" value="{{ url_for(redirectUrl) }}"/>

                <div id="dropdown-years-container" class="overflow-y-auto">
                    {% for availableYear in availableYears %}
                        <div class="form-check text-nowrap mb-2">
                            <input class="form-check-input" type="checkbox"
                                   id="availableYear-{{ loop.index }}"
                                   name="activeYears"
                                   value="{{ availableYear }}"
                                   {% if availableYear in quickFilterState.years %}checked{% endif %}>
                            <label class="form-check-label" for="availableYear-{{ loop.index }}">
                                {{ availableYear }}
                            </label>
                        </div>
                    {% endfor %}
                </div>

                {% if availableYears | length != 0 %}
                    <div class="d-flex justify-content-center">
                        <button type="submit" class="btn btn-sm btn-success my-2">{{ gettext('Apply') }}</button>
                    </div>
                {% endif %}
            </form>
        </div>
    </div>
{%- endmacro %}